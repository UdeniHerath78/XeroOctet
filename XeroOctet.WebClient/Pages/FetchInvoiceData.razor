@page "/FetchInvoiceData"


@using Xero.NetStandard.OAuth2.Model.Accounting
@using XeroOctet.Shared.DTO
@using XeroOctet.WebClient.Services

@inject IInvoiceService _InvoiceService;  

<h1>List of Invoices</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (invoiceData == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <button class="btn btn-success" @onclick="() => OnSaveInvoiceData(invoiceData)">Save</button>
    
    <br/><br/>
    
    <table class="table">
        <thead>
            <tr>
                <th>Invoice Number</th>
                <th>Contact Name</th>
                <th>Invoice Issue Date</th>
                <th>Invoice Amount</th>
                <th>Outstanding Amount</th>
                <th>Healthy Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var invoiceItem in invoiceData)
            {
                <tr>
                    <td>@invoiceItem.InvoiceNumber</td>
                    <td>@invoiceItem.ContactName</td>
                    <td>@invoiceItem.InvoiceIssueDate</td>
                    <td>@invoiceItem.InvoiceAmount.GetValueOrDefault(0)</td>
                    <td>@invoiceItem.OutstandingAmount.GetValueOrDefault(0)</td>
                    <td>@GetInvoiceHealtyStatus(invoiceItem.InvoiceIssueDate,
                        invoiceItem.OutstandingAmount.GetValueOrDefault(0),
                        invoiceItem.InvoiceAmount.GetValueOrDefault(0))</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {

    private IEnumerable<InvoiceDTO> invoiceData = null;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnInitializedAsync();
        invoiceData = await _InvoiceService.GetInvoices();

    }

    private string GetInvoiceHealtyStatus(DateTime? invoiceIssuedate, decimal? outStandingAmount, decimal? invoiceTotal)
    {
        if (invoiceIssuedate?.AddDays(90) <= DateTime.Today && outStandingAmount > 0 && invoiceTotal > 100000)
        {                        
            return "NO";
        }

        return "YES";
    }

    async Task OnSaveInvoiceData(IEnumerable<InvoiceDTO> invoiceDTO)
    {
        if(invoiceDTO.Any())
        {
            var result = await _InvoiceService.SaveInvoices(invoiceDTO);
        }
        
    }
}
