@page "/FetchInvoiceData"


@using Xero.NetStandard.OAuth2.Model.Accounting
@using XeroOctet.WebClient.DTO
@using XeroOctet.WebClient.Services

@inject IInvoiceService _InvoiceService;  

<h1>List of Invoices</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (invoiceData == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <button class="btn btn-success" @onclick="() => OnSaveInvoiceData(invoiceData)">Save</button>
    
    <br/>
    
    <table class="table">
        <thead>
            <tr>
                <th>Invoice Number</th>
                <th>Contact Name</th>
                <th>Invoice Issue Date</th>
                <th>InvoiceAmount</th>
                <th>OutstandingAmount</th>
                <th>Healthy Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var invoiceItem in invoiceData)
            {
                <tr>
                    <td>@invoiceItem.InvoiceNumber</td>
                    <td>@invoiceItem.Contact.Name</td>
                    <td>@invoiceItem.Date</td>
                    <td>@invoiceItem.Total.GetValueOrDefault(0)</td>
                    <td>@invoiceItem.AmountDue.GetValueOrDefault(0)</td>
                    <td>@GetInvoiceHealtyStatus(invoiceItem.Date,invoiceItem.AmountDue)</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {

    private IEnumerable<Invoice> invoiceData = null;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnInitializedAsync();
        var result = await _InvoiceService.getInvoices();
        invoiceData = result.Where(c => c.InvoiceNumber != "" && c.AmountDue > 0).ToList().Take(20);
    }

    private string GetInvoiceHealtyStatus(DateTime? invoiceIssuedate, decimal? outStandingAmount)
    {
        if (invoiceIssuedate?.AddDays(90) <= DateTime.Today && outStandingAmount > 0)
        {                        
            return "NO";
        }

        return "YES";
    }

    async Task OnSaveInvoiceData(IEnumerable<Invoice> invoices)
    {
        var invoiceDTO = new List<InvoiceDTO>();

        foreach (var item in invoices)
        {
            var dto = new InvoiceDTO();

            dto.InvoiceNumber = item.InvoiceNumber;
            dto.ContactName = item.Contact.Name;
            dto.InvoiceIssueDate = item.Date;
            dto.InvoiceAmount = item.Total;
            dto.OutstandingAmount = item.AmountDue;

            invoiceDTO.Add(dto);

        }

        if(invoiceDTO.Count > 0)
        {
            var result = await _InvoiceService.saveInvoices(invoiceDTO);
        }
        
    }
}
